1.基于BIO
2.支持多人同时在线
3.每个用户的发言都被转发给其他在线用户
实现模型：
1.第一个方案 我使用了 一个线程 接收到 客户端请求后 通过serverSocket.accept(); 获得一个socket

比我的优点，更符合面向对象思维

问题：
    这种BIO模型是有很大局限性的，因为每来一个用户都会新添加线程，用户多了那么线程对资源的浪费就很大，
直到进程无法支撑这么多线程后，那么程序也就崩溃了。

解决:
    于是再此基础上添加一个线程池，让线程最大情况下复用，称之为伪异步IO编程模型，通过线程池的方式限制住了线程的数量
但是当线程池没有这么多可用线程时，那么剩下的客户端将会被阻塞到线程外面进行等待那么其实（但本质上治标不治本）

