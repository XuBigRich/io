bio说明
bio是阻塞式io 其中bio中的b是block(阻塞的意思)
其具体阻塞体现在以下地方：

1.ServerSocket.accept 方法是阻塞式的，因为在服务器端调用了accept函数之后就会一直阻塞在这里，
直到有客户端连接服务端服务，客户端接受了这个连接请求，accept这个函数才会继续向下运行。
2.inputStream outpustStream 输入流与输出流 的读写方法 read()  , writer() 也全部都是阻塞式的。
由于这个方法一出现，那么在bio中的所有读写方法都将进入阻塞状态，造成了聊天室的一条线程一直占用资源而不干活的情况。
3.由于输入流与输出流的读写是完全阻塞的，造成了无法在同一个线程中处理多个Stream I/O,所以为了解决/避免一个人阻塞所有人的I/O操作
所以使用了多线程的方法去解决这种阻塞问题。


所以阻塞式I/O给开发带来了极大的局限性，Java也意识到这一点，于是提供了一种Nio的解决方案
之所以项目中使用bio也没有感受到阻塞是因为 项目使用了多线程的方式去掩盖住了阻塞